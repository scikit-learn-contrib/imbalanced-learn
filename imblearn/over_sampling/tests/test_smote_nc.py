"""Test the module SMOTENC."""
# Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>
#          Christos Aridas
#          Dzianis Dudnik
# License: MIT

from __future__ import print_function

import numpy as np
from pytest import raises
from sklearn.neighbors import NearestNeighbors
from sklearn.svm import SVC
from sklearn.utils.testing import assert_allclose, assert_array_equal
from sklearn.utils.testing import ignore_warnings

from imblearn.over_sampling import SMOTENC

RND_SEED = 0
# Assume original data-set had 2 nominal features:
# one with 3 possible values and one with 2.
# Therefore, after one-hot encoding, values in columns 2-4
# represent first nominal feature and values in columns 5-6
# represent second nominal feature.
X = np.array([[0.11622591, -0.0317206, 0, 0, 1, 0, 1],
              [0.77481731, 0.60935141, 0, 1, 0, 0, 1],
              [1.25192108, -0.22367336, 1, 0, 0, 0, 1],
              [0.53366841, -0.30312976, 1, 0, 0, 1, 0],
              [1.52091956, -0.49283504, 0, 1, 0, 0, 1],
              [-0.28162401, -2.10400981, 0, 0, 1, 1, 0],
              [0.83680821, 1.72827342, 0, 0, 1, 1, 0],
              [0.3084254, 0.33299982, 0, 1, 0, 0, 1],
              [0.70472253, -0.73309052, 1, 0, 0, 1, 0],
              [0.28893132, -0.38761769, 1, 0, 0, 0, 1],
              [1.15514042, 0.0129463, 0, 1, 0, 1, 0],
              [0.88407872, 0.35454207, 0, 0, 1, 0, 1],
              [1.31301027, -0.92648734, 0, 0, 1, 1, 0],
              [-1.11515198, -0.93689695, 0, 1, 0, 0, 1],
              [-0.18410027, -0.45194484, 1, 0, 0, 1, 0],
              [0.9281014, 0.53085498, 1, 0, 0, 0, 1],
              [-0.14374509, 0.27370049, 0, 1, 0, 0, 1],
              [-0.41635887, -0.38299653, 0, 0, 1, 1, 0],
              [0.08711622, 0.93259929, 0, 0, 1, 0, 1],
              [1.70580611, -0.11219234, 0, 1, 0, 1, 0]])
Y = np.array([0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0])
R_TOL = 1e-4
X_indices = [2, 5, 7]


def test_sample_regular():
    kind = 'regular'
    smote = SMOTENC(random_state=RND_SEED, kind=kind, categorical_feature_indices=X_indices)
    X_resampled, y_resampled = smote.fit_resample(X, Y)
    X_gt = np.array([[0.11622591, -0.0317206, 0, 0, 1, 0, 1],
                     [0.77481731, 0.60935141, 0, 1, 0, 0, 1],
                     [1.25192108, -0.22367336, 1, 0, 0, 0, 1],
                     [0.53366841, -0.30312976, 1, 0, 0, 1, 0],
                     [1.52091956, -0.49283504, 0, 1, 0, 0, 1],
                     [-0.28162401, -2.10400981, 0, 0, 1, 1, 0],
                     [0.83680821, 1.72827342, 0, 0, 1, 1, 0],
                     [0.3084254, 0.33299982, 0, 1, 0, 0, 1],
                     [0.70472253, -0.73309052, 1, 0, 0, 1, 0],
                     [0.28893132, -0.38761769, 1, 0, 0, 0, 1],
                     [1.15514042, 0.0129463, 0, 1, 0, 1, 0],
                     [0.88407872, 0.35454207, 0, 0, 1, 0, 1],
                     [1.31301027, -0.92648734, 0, 0, 1, 1, 0],
                     [-1.11515198, -0.93689695, 0, 1, 0, 0, 1],
                     [-0.18410027, -0.45194484, 1, 0, 0, 1, 0],
                     [0.9281014, 0.53085498, 1, 0, 0, 0, 1],
                     [-0.14374509, 0.27370049, 0, 1, 0, 0, 1],
                     [-0.41635887, -0.38299653, 0, 0, 1, 1, 0],
                     [0.08711622, 0.93259929, 0, 0, 1, 0, 1],
                     [1.70580611, -0.11219234, 0, 1, 0, 1, 0],
                     [-0.10940619, -0.18054033, 1, 0, 0, 0, 1],
                     [0.84976473, -0.15570176, 1, 0, 0, 0, 1],
                     [0.61319159, -0.11571667, 1, 0, 0, 0, 1],
                     [0.66052536, -0.28246518, 1, 0, 0, 0, 1]])
    y_gt = np.array([
        0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0
    ])
    assert_allclose(X_resampled, X_gt, rtol=R_TOL)
    assert_array_equal(y_resampled, y_gt)


def test_sample_regular_half():
    ratio = {0: 9, 1: 12}
    kind = 'regular'
    smote = SMOTENC(ratio=ratio, random_state=RND_SEED, kind=kind,
                    categorical_feature_indices=X_indices)
    X_resampled, y_resampled = smote.fit_resample(X, Y)
    X_gt = np.array([[0.11622591, -0.0317206, 0, 0, 1, 0, 1],
                     [0.77481731, 0.60935141, 0, 1, 0, 0, 1],
                     [1.25192108, -0.22367336, 1, 0, 0, 0, 1],
                     [0.53366841, -0.30312976, 1, 0, 0, 1, 0],
                     [1.52091956, -0.49283504, 0, 1, 0, 0, 1],
                     [-0.28162401, -2.10400981, 0, 0, 1, 1, 0],
                     [0.83680821, 1.72827342, 0, 0, 1, 1, 0],
                     [0.3084254, 0.33299982, 0, 1, 0, 0, 1],
                     [0.70472253, -0.73309052, 1, 0, 0, 1, 0],
                     [0.28893132, -0.38761769, 1, 0, 0, 0, 1],
                     [1.15514042, 0.0129463, 0, 1, 0, 1, 0],
                     [0.88407872, 0.35454207, 0, 0, 1, 0, 1],
                     [1.31301027, -0.92648734, 0, 0, 1, 1, 0],
                     [-1.11515198, -0.93689695, 0, 1, 0, 0, 1],
                     [-0.18410027, -0.45194484, 1, 0, 0, 1, 0],
                     [0.9281014, 0.53085498, 1, 0, 0, 0, 1],
                     [-0.14374509, 0.27370049, 0, 1, 0, 0, 1],
                     [-0.41635887, -0.38299653, 0, 0, 1, 1, 0],
                     [0.08711622, 0.93259929, 0, 0, 1, 0, 1],
                     [1.70580611, -0.11219234, 0, 1, 0, 1, 0],
                     [-0.20479669, -0.24345687, 1, 0, 0, 0, 1]])
    y_gt = np.array(
        [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0])
    assert_allclose(X_resampled, X_gt, rtol=R_TOL)
    assert_array_equal(y_resampled, y_gt)


def test_sample_borderline1():
    kind = 'borderline1'
    smote = SMOTENC(random_state=RND_SEED, kind=kind,
                    categorical_feature_indices=X_indices)
    X_resampled, y_resampled = smote.fit_resample(X, Y)
    X_gt = np.array([[0.11622591, -0.0317206, 0, 0, 1, 0, 1],
                     [0.77481731, 0.60935141, 0, 1, 0, 0, 1],
                     [1.25192108, -0.22367336, 1, 0, 0, 0, 1],
                     [0.53366841, -0.30312976, 1, 0, 0, 1, 0],
                     [1.52091956, -0.49283504, 0, 1, 0, 0, 1],
                     [-0.28162401, -2.10400981, 0, 0, 1, 1, 0],
                     [0.83680821, 1.72827342, 0, 0, 1, 1, 0],
                     [0.3084254, 0.33299982, 0, 1, 0, 0, 1],
                     [0.70472253, -0.73309052, 1, 0, 0, 1, 0],
                     [0.28893132, -0.38761769, 1, 0, 0, 0, 1],
                     [1.15514042, 0.0129463, 0, 1, 0, 1, 0],
                     [0.88407872, 0.35454207, 0, 0, 1, 0, 1],
                     [1.31301027, -0.92648734, 0, 0, 1, 1, 0],
                     [-1.11515198, -0.93689695, 0, 1, 0, 0, 1],
                     [-0.18410027, -0.45194484, 1, 0, 0, 1, 0],
                     [0.9281014, 0.53085498, 1, 0, 0, 0, 1],
                     [-0.14374509, 0.27370049, 0, 1, 0, 0, 1],
                     [-0.41635887, -0.38299653, 0, 0, 1, 1, 0],
                     [0.08711622, 0.93259929, 0, 0, 1, 0, 1],
                     [1.70580611, -0.11219234, 0, 1, 0, 1, 0],
                     [-0.21587462, -0.25076352, 1, 0, 0, 0, 1],
                     [0.55276636, -0.10550373, 1, 0, 0, 0, 1],
                     [0.45413453, -0.08883319, 1, 0, 0, 0, 1],
                     [1.25538563, -0.26353203, 0, 1, 0, 1, 0]])
    y_gt = np.array([
        0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0
    ])
    assert_allclose(X_resampled, X_gt, rtol=R_TOL)
    assert_array_equal(y_resampled, y_gt)


def test_sample_borderline2():
    kind = 'borderline2'
    smote = SMOTENC(random_state=RND_SEED, kind=kind,
                    categorical_feature_indices=X_indices)
    X_resampled, y_resampled = smote.fit_resample(X, Y)
    X_gt = np.array([[0.11622591, -0.0317206, 0, 0, 1, 0, 1],
                     [0.77481731, 0.60935141, 0, 1, 0, 0, 1],
                     [1.25192108, -0.22367336, 1, 0, 0, 0, 1],
                     [0.53366841, -0.30312976, 1, 0, 0, 1, 0],
                     [1.52091956, -0.49283504, 0, 1, 0, 0, 1],
                     [-0.28162401, -2.10400981, 0, 0, 1, 1, 0],
                     [0.83680821, 1.72827342, 0, 0, 1, 1, 0],
                     [0.3084254, 0.33299982, 0, 1, 0, 0, 1],
                     [0.70472253, -0.73309052, 1, 0, 0, 1, 0],
                     [0.28893132, -0.38761769, 1, 0, 0, 0, 1],
                     [1.15514042, 0.0129463, 0, 1, 0, 1, 0],
                     [0.88407872, 0.35454207, 0, 0, 1, 0, 1],
                     [1.31301027, -0.92648734, 0, 0, 1, 1, 0],
                     [-1.11515198, -0.93689695, 0, 1, 0, 0, 1],
                     [-0.18410027, -0.45194484, 1, 0, 0, 1, 0],
                     [0.9281014, 0.53085498, 1, 0, 0, 0, 1],
                     [-0.14374509, 0.27370049, 0, 1, 0, 0, 1],
                     [-0.41635887, -0.38299653, 0, 0, 1, 1, 0],
                     [0.08711622, 0.93259929, 0, 0, 1, 0, 1],
                     [1.70580611, -0.11219234, 0, 1, 0, 1, 0],
                     [-0.34070287, -0.33309624, 1, 0, 0, 0, 1],
                     [1.07844562, -0.19435291, 1, 0, 0, 0, 1],
                     [0.42933572, -0.01825881, 0, 1, 0, 1, 0]])
    y_gt = np.array(
        [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0])
    assert_allclose(X_resampled, X_gt, rtol=R_TOL)
    assert_array_equal(y_resampled, y_gt)


def test_sample_svm():
    kind = 'svm'
    smote = SMOTENC(random_state=RND_SEED, kind=kind,
                    categorical_feature_indices=X_indices)
    X_resampled, y_resampled = smote.fit_resample(X, Y)
    X_gt = np.array([[0.11622591, -0.0317206, 0, 0, 1, 0, 1],
                     [0.77481731, 0.60935141, 0, 1, 0, 0, 1],
                     [1.25192108, -0.22367336, 1, 0, 0, 0, 1],
                     [0.53366841, -0.30312976, 1, 0, 0, 1, 0],
                     [1.52091956, -0.49283504, 0, 1, 0, 0, 1],
                     [-0.28162401, -2.10400981, 0, 0, 1, 1, 0],
                     [0.83680821, 1.72827342, 0, 0, 1, 1, 0],
                     [0.3084254, 0.33299982, 0, 1, 0, 0, 1],
                     [0.70472253, -0.73309052, 1, 0, 0, 1, 0],
                     [0.28893132, -0.38761769, 1, 0, 0, 0, 1],
                     [1.15514042, 0.0129463, 0, 1, 0, 1, 0],
                     [0.88407872, 0.35454207, 0, 0, 1, 0, 1],
                     [1.31301027, -0.92648734, 0, 0, 1, 1, 0],
                     [-1.11515198, -0.93689695, 0, 1, 0, 0, 1],
                     [-0.18410027, -0.45194484, 1, 0, 0, 1, 0],
                     [0.9281014, 0.53085498, 1, 0, 0, 0, 1],
                     [-0.14374509, 0.27370049, 0, 1, 0, 0, 1],
                     [-0.41635887, -0.38299653, 0, 0, 1, 1, 0],
                     [0.08711622, 0.93259929, 0, 0, 1, 0, 1],
                     [1.70580611, -0.11219234, 0, 1, 0, 1, 0],
                     [-0.34070287, -0.33309624, 1, 0, 0, 0, 1],
                     [1.07844562, -0.19435291, 1, 0, 0, 0, 1],
                     [1.44228238, -1.31256615, 1, 0, 0, 0, 1],
                     [1.25636713, -1.04463226, 1, 0, 0, 0, 1]])
    y_gt = np.array(
        [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0])
    assert_allclose(X_resampled, X_gt, rtol=R_TOL)
    assert_array_equal(y_resampled, y_gt)


def test_fit_sample_nn_obj():
    kind = 'borderline1'
    nn_m = NearestNeighbors(n_neighbors=11)
    nn_k = NearestNeighbors(n_neighbors=6)
    smote = SMOTENC(random_state=RND_SEED, kind=kind, k_neighbors=nn_k,
                    m_neighbors=nn_m, categorical_feature_indices=X_indices)
    X_resampled, y_resampled = smote.fit_resample(X, Y)
    X_gt = np.array([[0.11622591, -0.0317206, 0, 0, 1, 0, 1],
                     [0.77481731, 0.60935141, 0, 1, 0, 0, 1],
                     [1.25192108, -0.22367336, 1, 0, 0, 0, 1],
                     [0.53366841, -0.30312976, 1, 0, 0, 1, 0],
                     [1.52091956, -0.49283504, 0, 1, 0, 0, 1],
                     [-0.28162401, -2.10400981, 0, 0, 1, 1, 0],
                     [0.83680821, 1.72827342, 0, 0, 1, 1, 0],
                     [0.3084254, 0.33299982, 0, 1, 0, 0, 1],
                     [0.70472253, -0.73309052, 1, 0, 0, 1, 0],
                     [0.28893132, -0.38761769, 1, 0, 0, 0, 1],
                     [1.15514042, 0.0129463, 0, 1, 0, 1, 0],
                     [0.88407872, 0.35454207, 0, 0, 1, 0, 1],
                     [1.31301027, -0.92648734, 0, 0, 1, 1, 0],
                     [-1.11515198, -0.93689695, 0, 1, 0, 0, 1],
                     [-0.18410027, -0.45194484, 1, 0, 0, 1, 0],
                     [0.9281014, 0.53085498, 1, 0, 0, 0, 1],
                     [-0.14374509, 0.27370049, 0, 1, 0, 0, 1],
                     [-0.41635887, -0.38299653, 0, 0, 1, 1, 0],
                     [0.08711622, 0.93259929, 0, 0, 1, 0, 1],
                     [1.70580611, -0.11219234, 0, 1, 0, 1, 0],
                     [-0.21587462, -0.25076352, 1, 0, 0, 0, 1],
                     [0.55276636, -0.10550373, 1, 0, 0, 0, 1],
                     [0.45413453, -0.08883319, 1, 0, 0, 0, 1],
                     [1.25538563, -0.26353203, 0, 1, 0, 1, 0]])
    y_gt = np.array([
        0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0
    ])
    assert_allclose(X_resampled, X_gt, rtol=R_TOL)
    assert_array_equal(y_resampled, y_gt)


def test_sample_regular_with_nn():
    kind = 'regular'
    nn_k = NearestNeighbors(n_neighbors=6)
    smote = SMOTENC(random_state=RND_SEED, kind=kind, k_neighbors=nn_k,
                    categorical_feature_indices=X_indices)
    X_resampled, y_resampled = smote.fit_resample(X, Y)
    X_gt = np.array([[0.11622591, -0.0317206, 0, 0, 1, 0, 1],
                     [0.77481731, 0.60935141, 0, 1, 0, 0, 1],
                     [1.25192108, -0.22367336, 1, 0, 0, 0, 1],
                     [0.53366841, -0.30312976, 1, 0, 0, 1, 0],
                     [1.52091956, -0.49283504, 0, 1, 0, 0, 1],
                     [-0.28162401, -2.10400981, 0, 0, 1, 1, 0],
                     [0.83680821, 1.72827342, 0, 0, 1, 1, 0],
                     [0.3084254, 0.33299982, 0, 1, 0, 0, 1],
                     [0.70472253, -0.73309052, 1, 0, 0, 1, 0],
                     [0.28893132, -0.38761769, 1, 0, 0, 0, 1],
                     [1.15514042, 0.0129463, 0, 1, 0, 1, 0],
                     [0.88407872, 0.35454207, 0, 0, 1, 0, 1],
                     [1.31301027, -0.92648734, 0, 0, 1, 1, 0],
                     [-1.11515198, -0.93689695, 0, 1, 0, 0, 1],
                     [-0.18410027, -0.45194484, 1, 0, 0, 1, 0],
                     [0.9281014, 0.53085498, 1, 0, 0, 0, 1],
                     [-0.14374509, 0.27370049, 0, 1, 0, 0, 1],
                     [-0.41635887, -0.38299653, 0, 0, 1, 1, 0],
                     [0.08711622, 0.93259929, 0, 0, 1, 0, 1],
                     [1.70580611, -0.11219234, 0, 1, 0, 1, 0],
                     [-0.10940619, -0.18054033, 1, 0, 0, 0, 1],
                     [0.84976473, -0.15570176, 1, 0, 0, 0, 1],
                     [0.61319159, -0.11571667, 1, 0, 0, 0, 1],
                     [0.66052536, -0.28246518, 1, 0, 0, 0, 1]])
    y_gt = np.array([
        0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0
    ])
    assert_allclose(X_resampled, X_gt, rtol=R_TOL)
    assert_array_equal(y_resampled, y_gt)


def test_sample_regular_with_nn_svm():
    kind = 'svm'
    nn_k = NearestNeighbors(n_neighbors=6)
    svm = SVC(random_state=RND_SEED)
    smote = SMOTENC(
        random_state=RND_SEED, kind=kind, k_neighbors=nn_k, svm_estimator=svm,
        categorical_feature_indices=X_indices)
    X_resampled, y_resampled = smote.fit_resample(X, Y)
    X_gt = np.array([[0.11622591, -0.0317206, 0, 0, 1, 0, 1],
                     [0.77481731, 0.60935141, 0, 1, 0, 0, 1],
                     [1.25192108, -0.22367336, 1, 0, 0, 0, 1],
                     [0.53366841, -0.30312976, 1, 0, 0, 1, 0],
                     [1.52091956, -0.49283504, 0, 1, 0, 0, 1],
                     [-0.28162401, -2.10400981, 0, 0, 1, 1, 0],
                     [0.83680821, 1.72827342, 0, 0, 1, 1, 0],
                     [0.3084254, 0.33299982, 0, 1, 0, 0, 1],
                     [0.70472253, -0.73309052, 1, 0, 0, 1, 0],
                     [0.28893132, -0.38761769, 1, 0, 0, 0, 1],
                     [1.15514042, 0.0129463, 0, 1, 0, 1, 0],
                     [0.88407872, 0.35454207, 0, 0, 1, 0, 1],
                     [1.31301027, -0.92648734, 0, 0, 1, 1, 0],
                     [-1.11515198, -0.93689695, 0, 1, 0, 0, 1],
                     [-0.18410027, -0.45194484, 1, 0, 0, 1, 0],
                     [0.9281014, 0.53085498, 1, 0, 0, 0, 1],
                     [-0.14374509, 0.27370049, 0, 1, 0, 0, 1],
                     [-0.41635887, -0.38299653, 0, 0, 1, 1, 0],
                     [0.08711622, 0.93259929, 0, 0, 1, 0, 1],
                     [1.70580611, -0.11219234, 0, 1, 0, 1, 0],
                     [-0.34070287, -0.33309624, 1, 0, 0, 0, 1],
                     [1.07844562, -0.19435291, 1, 0, 0, 0, 1],
                     [1.44228238, -1.31256615, 1, 0, 0, 0, 1],
                     [1.25636713, -1.04463226, 1, 0, 0, 0, 1]])
    y_gt = np.array(
        [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0])
    assert_allclose(X_resampled, X_gt, rtol=R_TOL)
    assert_array_equal(y_resampled, y_gt)


@ignore_warnings
def test_sample_regular_fallback():
    kind = 'regular'
    smote = SMOTENC(random_state=RND_SEED, kind=kind)
    X_resampled, y_resampled = smote.fit_resample(X, Y)
    X_gt = np.array([[0.11622591, -0.0317206, 0, 0, 1, 0, 1],
                     [0.77481731, 0.60935141, 0, 1, 0, 0, 1],
                     [1.25192108, -0.22367336, 1, 0, 0, 0, 1],
                     [0.53366841, -0.30312976, 1, 0, 0, 1, 0],
                     [1.52091956, -0.49283504, 0, 1, 0, 0, 1],
                     [-0.28162401, -2.10400981, 0, 0, 1, 1, 0],
                     [0.83680821, 1.72827342, 0, 0, 1, 1, 0],
                     [0.3084254, 0.33299982, 0, 1, 0, 0, 1],
                     [0.70472253, -0.73309052, 1, 0, 0, 1, 0],
                     [0.28893132, -0.38761769, 1, 0, 0, 0, 1],
                     [1.15514042, 0.0129463, 0, 1, 0, 1, 0],
                     [0.88407872, 0.35454207, 0, 0, 1, 0, 1],
                     [1.31301027, -0.92648734, 0, 0, 1, 1, 0],
                     [-1.11515198, -0.93689695, 0, 1, 0, 0, 1],
                     [-0.18410027, -0.45194484, 1, 0, 0, 1, 0],
                     [0.9281014, 0.53085498, 1, 0, 0, 0, 1],
                     [-0.14374509, 0.27370049, 0, 1, 0, 0, 1],
                     [-0.41635887, -0.38299653, 0, 0, 1, 1, 0],
                     [0.08711622, 0.93259929, 0, 0, 1, 0, 1],
                     [1.70580611, -0.11219234, 0, 1, 0, 1, 0],
                     [0.44153044, 0.13192143, 0, 0, 1, 0, 1],
                     [1.02350927, -0.3295517, 0,
                      0.64589411, 0.35410589, 0, 1],
                     [0.73090189, -0.23349838, 0,
                      0.43758721, 0.56241279, 0, 1],
                     [0.97301181, 0.30402881, 0, 0.108227, 0.891773,
                      0.108227, 0.891773]])
    y_gt = np.array([
        0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0
    ])
    assert_allclose(X_resampled, X_gt, rtol=R_TOL)
    assert_array_equal(y_resampled, y_gt)


@ignore_warnings
def test_sample_regular_fallback_no_nominal():
    kind = 'regular'
    smote = SMOTENC(random_state=RND_SEED, kind=kind)
    # fitting without nominal features -> result should be equal to
    # the one from normal SMOTE
    X_resampled, y_resampled = smote.fit_resample(X[:, 0:2], Y)
    X_gt = np.array([[0.11622591, -0.0317206], [0.77481731, 0.60935141],
                     [1.25192108, -0.22367336], [0.53366841, -0.30312976],
                     [1.52091956, -0.49283504], [-0.28162401, -2.10400981],
                     [0.83680821, 1.72827342], [0.3084254, 0.33299982],
                     [0.70472253, -0.73309052], [0.28893132, -0.38761769],
                     [1.15514042, 0.0129463], [0.88407872, 0.35454207],
                     [1.31301027, -0.92648734], [-1.11515198, -0.93689695],
                     [-0.18410027, -0.45194484], [0.9281014, 0.53085498],
                     [-0.14374509, 0.27370049], [-0.41635887, -0.38299653],
                     [0.08711622, 0.93259929], [1.70580611, -0.11219234],
                     [0.29307743, -0.14670439], [0.84976473, -0.15570176],
                     [0.61319159, -0.11571668], [0.66052536, -0.28246517]])
    y_gt = np.array([
        0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0
    ])
    assert_allclose(X_resampled, X_gt, rtol=R_TOL)
    assert_array_equal(y_resampled, y_gt)


def test_fit_feature_indices_too_little():
    smote = SMOTENC(random_state=RND_SEED, categorical_feature_indices=[1])
    with raises(ValueError, match='minimum of 2 is required'):
        smote.fit_resample(X, Y)


def test_fit_feature_indices_out_of_bounds():
    smote = SMOTENC(random_state=RND_SEED, categorical_feature_indices=[3, 5, 8])
    with raises(ValueError, match='Indices of categorical features have to be '
                                  'less than number of features in X'):
        smote.fit_resample(X, Y)


def test_fit_feature_indices_covers_all_features():
    smote = SMOTENC(random_state=RND_SEED, categorical_feature_indices=[0, 5, 7])
    with raises(ValueError, match='all features in X are categorical '
                                  'which is not supported'):
        smote.fit_resample(X, Y)
